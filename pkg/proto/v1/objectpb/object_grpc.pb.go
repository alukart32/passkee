// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: object.proto

package objectpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ObjectVault_UploadObject_FullMethodName     = "/object.v1.ObjectVault/UploadObject"
	ObjectVault_DownloadObject_FullMethodName   = "/object.v1.ObjectVault/DownloadObject"
	ObjectVault_UpdateObjectInfo_FullMethodName = "/object.v1.ObjectVault/UpdateObjectInfo"
	ObjectVault_IndexObjects_FullMethodName     = "/object.v1.ObjectVault/IndexObjects"
	ObjectVault_DeleteObject_FullMethodName     = "/object.v1.ObjectVault/DeleteObject"
)

// ObjectVaultClient is the client API for ObjectVault service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ObjectVaultClient interface {
	// Uploads a new data object.
	//
	// The first message contains the metadata of the object, such as name, type, and optional notes.
	// The following messages will contain an object with a data block size of 4096 bytes.
	UploadObject(ctx context.Context, opts ...grpc.CallOption) (ObjectVault_UploadObjectClient, error)
	// Downloads the object from vault.
	//
	// The first message contains the metadata of the object, such as name and optional notes.
	// The following messages will contain an object with a data block size of 4096 bytes.
	DownloadObject(ctx context.Context, in *DownloadObjectRequest, opts ...grpc.CallOption) (ObjectVault_DownloadObjectClient, error)
	// UpdateObjectInfo updates the object details.
	UpdateObjectInfo(ctx context.Context, in *UpdateObjectInfoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Index lists all objects.
	IndexObjects(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*IndexObjectsResponse, error)
	// Deletes an object.
	DeleteObject(ctx context.Context, in *DeleteObjectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type objectVaultClient struct {
	cc grpc.ClientConnInterface
}

func NewObjectVaultClient(cc grpc.ClientConnInterface) ObjectVaultClient {
	return &objectVaultClient{cc}
}

func (c *objectVaultClient) UploadObject(ctx context.Context, opts ...grpc.CallOption) (ObjectVault_UploadObjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &ObjectVault_ServiceDesc.Streams[0], ObjectVault_UploadObject_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &objectVaultUploadObjectClient{stream}
	return x, nil
}

type ObjectVault_UploadObjectClient interface {
	Send(*UploadObjectRequest) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type objectVaultUploadObjectClient struct {
	grpc.ClientStream
}

func (x *objectVaultUploadObjectClient) Send(m *UploadObjectRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *objectVaultUploadObjectClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *objectVaultClient) DownloadObject(ctx context.Context, in *DownloadObjectRequest, opts ...grpc.CallOption) (ObjectVault_DownloadObjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &ObjectVault_ServiceDesc.Streams[1], ObjectVault_DownloadObject_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &objectVaultDownloadObjectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ObjectVault_DownloadObjectClient interface {
	Recv() (*DownloadObjectResponse, error)
	grpc.ClientStream
}

type objectVaultDownloadObjectClient struct {
	grpc.ClientStream
}

func (x *objectVaultDownloadObjectClient) Recv() (*DownloadObjectResponse, error) {
	m := new(DownloadObjectResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *objectVaultClient) UpdateObjectInfo(ctx context.Context, in *UpdateObjectInfoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ObjectVault_UpdateObjectInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectVaultClient) IndexObjects(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*IndexObjectsResponse, error) {
	out := new(IndexObjectsResponse)
	err := c.cc.Invoke(ctx, ObjectVault_IndexObjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *objectVaultClient) DeleteObject(ctx context.Context, in *DeleteObjectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ObjectVault_DeleteObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ObjectVaultServer is the server API for ObjectVault service.
// All implementations must embed UnimplementedObjectVaultServer
// for forward compatibility
type ObjectVaultServer interface {
	// Uploads a new data object.
	//
	// The first message contains the metadata of the object, such as name, type, and optional notes.
	// The following messages will contain an object with a data block size of 4096 bytes.
	UploadObject(ObjectVault_UploadObjectServer) error
	// Downloads the object from vault.
	//
	// The first message contains the metadata of the object, such as name and optional notes.
	// The following messages will contain an object with a data block size of 4096 bytes.
	DownloadObject(*DownloadObjectRequest, ObjectVault_DownloadObjectServer) error
	// UpdateObjectInfo updates the object details.
	UpdateObjectInfo(context.Context, *UpdateObjectInfoRequest) (*emptypb.Empty, error)
	// Index lists all objects.
	IndexObjects(context.Context, *emptypb.Empty) (*IndexObjectsResponse, error)
	// Deletes an object.
	DeleteObject(context.Context, *DeleteObjectRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedObjectVaultServer()
}

// UnimplementedObjectVaultServer must be embedded to have forward compatible implementations.
type UnimplementedObjectVaultServer struct {
}

func (UnimplementedObjectVaultServer) UploadObject(ObjectVault_UploadObjectServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadObject not implemented")
}
func (UnimplementedObjectVaultServer) DownloadObject(*DownloadObjectRequest, ObjectVault_DownloadObjectServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadObject not implemented")
}
func (UnimplementedObjectVaultServer) UpdateObjectInfo(context.Context, *UpdateObjectInfoRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateObjectInfo not implemented")
}
func (UnimplementedObjectVaultServer) IndexObjects(context.Context, *emptypb.Empty) (*IndexObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndexObjects not implemented")
}
func (UnimplementedObjectVaultServer) DeleteObject(context.Context, *DeleteObjectRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObject not implemented")
}
func (UnimplementedObjectVaultServer) mustEmbedUnimplementedObjectVaultServer() {}

// UnsafeObjectVaultServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ObjectVaultServer will
// result in compilation errors.
type UnsafeObjectVaultServer interface {
	mustEmbedUnimplementedObjectVaultServer()
}

func RegisterObjectVaultServer(s grpc.ServiceRegistrar, srv ObjectVaultServer) {
	s.RegisterService(&ObjectVault_ServiceDesc, srv)
}

func _ObjectVault_UploadObject_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ObjectVaultServer).UploadObject(&objectVaultUploadObjectServer{stream})
}

type ObjectVault_UploadObjectServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*UploadObjectRequest, error)
	grpc.ServerStream
}

type objectVaultUploadObjectServer struct {
	grpc.ServerStream
}

func (x *objectVaultUploadObjectServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *objectVaultUploadObjectServer) Recv() (*UploadObjectRequest, error) {
	m := new(UploadObjectRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ObjectVault_DownloadObject_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadObjectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ObjectVaultServer).DownloadObject(m, &objectVaultDownloadObjectServer{stream})
}

type ObjectVault_DownloadObjectServer interface {
	Send(*DownloadObjectResponse) error
	grpc.ServerStream
}

type objectVaultDownloadObjectServer struct {
	grpc.ServerStream
}

func (x *objectVaultDownloadObjectServer) Send(m *DownloadObjectResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ObjectVault_UpdateObjectInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateObjectInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectVaultServer).UpdateObjectInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectVault_UpdateObjectInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectVaultServer).UpdateObjectInfo(ctx, req.(*UpdateObjectInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectVault_IndexObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectVaultServer).IndexObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectVault_IndexObjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectVaultServer).IndexObjects(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ObjectVault_DeleteObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ObjectVaultServer).DeleteObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ObjectVault_DeleteObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ObjectVaultServer).DeleteObject(ctx, req.(*DeleteObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ObjectVault_ServiceDesc is the grpc.ServiceDesc for ObjectVault service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ObjectVault_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "object.v1.ObjectVault",
	HandlerType: (*ObjectVaultServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateObjectInfo",
			Handler:    _ObjectVault_UpdateObjectInfo_Handler,
		},
		{
			MethodName: "IndexObjects",
			Handler:    _ObjectVault_IndexObjects_Handler,
		},
		{
			MethodName: "DeleteObject",
			Handler:    _ObjectVault_DeleteObject_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadObject",
			Handler:       _ObjectVault_UploadObject_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadObject",
			Handler:       _ObjectVault_DownloadObject_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "object.proto",
}
