// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: object.proto

package blobpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BlobVault_UploadObject_FullMethodName     = "/blob.v1.BlobVault/UploadObject"
	BlobVault_DownloadObject_FullMethodName   = "/blob.v1.BlobVault/DownloadObject"
	BlobVault_UpdateObjectInfo_FullMethodName = "/blob.v1.BlobVault/UpdateObjectInfo"
	BlobVault_IndexObjects_FullMethodName     = "/blob.v1.BlobVault/IndexObjects"
	BlobVault_DeleteObject_FullMethodName     = "/blob.v1.BlobVault/DeleteObject"
)

// BlobVaultClient is the client API for BlobVault service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlobVaultClient interface {
	// Uploads a new data object.
	//
	// The first message contains the metadata of the object, such as name, type, and optional notes.
	// The following messages will contain an object with a data block size of 4096 bytes.
	UploadObject(ctx context.Context, opts ...grpc.CallOption) (BlobVault_UploadObjectClient, error)
	// Downloads the object from vault.
	//
	// The first message contains the metadata of the object, such as name and optional notes.
	// The following messages will contain an object with a data block size of 4096 bytes.
	DownloadObject(ctx context.Context, in *DownloadObjectRequest, opts ...grpc.CallOption) (BlobVault_DownloadObjectClient, error)
	// UpdateObjectInfo updates the object details.
	UpdateObjectInfo(ctx context.Context, in *UpdateObjectInfoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Index lists all objects.
	IndexObjects(ctx context.Context, in *IndexObjectsRequest, opts ...grpc.CallOption) (*IndexObjectsResponse, error)
	// Deletes an object.
	DeleteObject(ctx context.Context, in *DeleteObjectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type blobVaultClient struct {
	cc grpc.ClientConnInterface
}

func NewBlobVaultClient(cc grpc.ClientConnInterface) BlobVaultClient {
	return &blobVaultClient{cc}
}

func (c *blobVaultClient) UploadObject(ctx context.Context, opts ...grpc.CallOption) (BlobVault_UploadObjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &BlobVault_ServiceDesc.Streams[0], BlobVault_UploadObject_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &blobVaultUploadObjectClient{stream}
	return x, nil
}

type BlobVault_UploadObjectClient interface {
	Send(*UploadObjectRequest) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type blobVaultUploadObjectClient struct {
	grpc.ClientStream
}

func (x *blobVaultUploadObjectClient) Send(m *UploadObjectRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *blobVaultUploadObjectClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blobVaultClient) DownloadObject(ctx context.Context, in *DownloadObjectRequest, opts ...grpc.CallOption) (BlobVault_DownloadObjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &BlobVault_ServiceDesc.Streams[1], BlobVault_DownloadObject_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &blobVaultDownloadObjectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BlobVault_DownloadObjectClient interface {
	Recv() (*DownloadObjectResponse, error)
	grpc.ClientStream
}

type blobVaultDownloadObjectClient struct {
	grpc.ClientStream
}

func (x *blobVaultDownloadObjectClient) Recv() (*DownloadObjectResponse, error) {
	m := new(DownloadObjectResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blobVaultClient) UpdateObjectInfo(ctx context.Context, in *UpdateObjectInfoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BlobVault_UpdateObjectInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blobVaultClient) IndexObjects(ctx context.Context, in *IndexObjectsRequest, opts ...grpc.CallOption) (*IndexObjectsResponse, error) {
	out := new(IndexObjectsResponse)
	err := c.cc.Invoke(ctx, BlobVault_IndexObjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blobVaultClient) DeleteObject(ctx context.Context, in *DeleteObjectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BlobVault_DeleteObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlobVaultServer is the server API for BlobVault service.
// All implementations must embed UnimplementedBlobVaultServer
// for forward compatibility
type BlobVaultServer interface {
	// Uploads a new data object.
	//
	// The first message contains the metadata of the object, such as name, type, and optional notes.
	// The following messages will contain an object with a data block size of 4096 bytes.
	UploadObject(BlobVault_UploadObjectServer) error
	// Downloads the object from vault.
	//
	// The first message contains the metadata of the object, such as name and optional notes.
	// The following messages will contain an object with a data block size of 4096 bytes.
	DownloadObject(*DownloadObjectRequest, BlobVault_DownloadObjectServer) error
	// UpdateObjectInfo updates the object details.
	UpdateObjectInfo(context.Context, *UpdateObjectInfoRequest) (*emptypb.Empty, error)
	// Index lists all objects.
	IndexObjects(context.Context, *IndexObjectsRequest) (*IndexObjectsResponse, error)
	// Deletes an object.
	DeleteObject(context.Context, *DeleteObjectRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedBlobVaultServer()
}

// UnimplementedBlobVaultServer must be embedded to have forward compatible implementations.
type UnimplementedBlobVaultServer struct {
}

func (UnimplementedBlobVaultServer) UploadObject(BlobVault_UploadObjectServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadObject not implemented")
}
func (UnimplementedBlobVaultServer) DownloadObject(*DownloadObjectRequest, BlobVault_DownloadObjectServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadObject not implemented")
}
func (UnimplementedBlobVaultServer) UpdateObjectInfo(context.Context, *UpdateObjectInfoRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateObjectInfo not implemented")
}
func (UnimplementedBlobVaultServer) IndexObjects(context.Context, *IndexObjectsRequest) (*IndexObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndexObjects not implemented")
}
func (UnimplementedBlobVaultServer) DeleteObject(context.Context, *DeleteObjectRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObject not implemented")
}
func (UnimplementedBlobVaultServer) mustEmbedUnimplementedBlobVaultServer() {}

// UnsafeBlobVaultServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlobVaultServer will
// result in compilation errors.
type UnsafeBlobVaultServer interface {
	mustEmbedUnimplementedBlobVaultServer()
}

func RegisterBlobVaultServer(s grpc.ServiceRegistrar, srv BlobVaultServer) {
	s.RegisterService(&BlobVault_ServiceDesc, srv)
}

func _BlobVault_UploadObject_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BlobVaultServer).UploadObject(&blobVaultUploadObjectServer{stream})
}

type BlobVault_UploadObjectServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*UploadObjectRequest, error)
	grpc.ServerStream
}

type blobVaultUploadObjectServer struct {
	grpc.ServerStream
}

func (x *blobVaultUploadObjectServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *blobVaultUploadObjectServer) Recv() (*UploadObjectRequest, error) {
	m := new(UploadObjectRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BlobVault_DownloadObject_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadObjectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlobVaultServer).DownloadObject(m, &blobVaultDownloadObjectServer{stream})
}

type BlobVault_DownloadObjectServer interface {
	Send(*DownloadObjectResponse) error
	grpc.ServerStream
}

type blobVaultDownloadObjectServer struct {
	grpc.ServerStream
}

func (x *blobVaultDownloadObjectServer) Send(m *DownloadObjectResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BlobVault_UpdateObjectInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateObjectInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlobVaultServer).UpdateObjectInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlobVault_UpdateObjectInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlobVaultServer).UpdateObjectInfo(ctx, req.(*UpdateObjectInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlobVault_IndexObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlobVaultServer).IndexObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlobVault_IndexObjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlobVaultServer).IndexObjects(ctx, req.(*IndexObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlobVault_DeleteObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlobVaultServer).DeleteObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlobVault_DeleteObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlobVaultServer).DeleteObject(ctx, req.(*DeleteObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BlobVault_ServiceDesc is the grpc.ServiceDesc for BlobVault service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlobVault_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blob.v1.BlobVault",
	HandlerType: (*BlobVaultServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateObjectInfo",
			Handler:    _BlobVault_UpdateObjectInfo_Handler,
		},
		{
			MethodName: "IndexObjects",
			Handler:    _BlobVault_IndexObjects_Handler,
		},
		{
			MethodName: "DeleteObject",
			Handler:    _BlobVault_DeleteObject_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadObject",
			Handler:       _BlobVault_UploadObject_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadObject",
			Handler:       _BlobVault_DownloadObject_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "object.proto",
}
