// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: passwords.proto

package passwordspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PasswordsVault_AddPassword_FullMethodName    = "/passwords.v1.PasswordsVault/AddPassword"
	PasswordsVault_GetPassword_FullMethodName    = "/passwords.v1.PasswordsVault/GetPassword"
	PasswordsVault_UpdatePassword_FullMethodName = "/passwords.v1.PasswordsVault/UpdatePassword"
	PasswordsVault_IndexPasswords_FullMethodName = "/passwords.v1.PasswordsVault/IndexPasswords"
	PasswordsVault_DeletePassword_FullMethodName = "/passwords.v1.PasswordsVault/DeletePassword"
)

// PasswordsVaultClient is the client API for PasswordsVault service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PasswordsVaultClient interface {
	AddPassword(ctx context.Context, in *AddPasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetPassword(ctx context.Context, in *GetPasswordRequest, opts ...grpc.CallOption) (*Password, error)
	UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	IndexPasswords(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*IndexPasswordsResponse, error)
	DeletePassword(ctx context.Context, in *DeletePasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type passwordsVaultClient struct {
	cc grpc.ClientConnInterface
}

func NewPasswordsVaultClient(cc grpc.ClientConnInterface) PasswordsVaultClient {
	return &passwordsVaultClient{cc}
}

func (c *passwordsVaultClient) AddPassword(ctx context.Context, in *AddPasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PasswordsVault_AddPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordsVaultClient) GetPassword(ctx context.Context, in *GetPasswordRequest, opts ...grpc.CallOption) (*Password, error) {
	out := new(Password)
	err := c.cc.Invoke(ctx, PasswordsVault_GetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordsVaultClient) UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PasswordsVault_UpdatePassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordsVaultClient) IndexPasswords(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*IndexPasswordsResponse, error) {
	out := new(IndexPasswordsResponse)
	err := c.cc.Invoke(ctx, PasswordsVault_IndexPasswords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordsVaultClient) DeletePassword(ctx context.Context, in *DeletePasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PasswordsVault_DeletePassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PasswordsVaultServer is the server API for PasswordsVault service.
// All implementations must embed UnimplementedPasswordsVaultServer
// for forward compatibility
type PasswordsVaultServer interface {
	AddPassword(context.Context, *AddPasswordRequest) (*emptypb.Empty, error)
	GetPassword(context.Context, *GetPasswordRequest) (*Password, error)
	UpdatePassword(context.Context, *UpdatePasswordRequest) (*emptypb.Empty, error)
	IndexPasswords(context.Context, *emptypb.Empty) (*IndexPasswordsResponse, error)
	DeletePassword(context.Context, *DeletePasswordRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedPasswordsVaultServer()
}

// UnimplementedPasswordsVaultServer must be embedded to have forward compatible implementations.
type UnimplementedPasswordsVaultServer struct {
}

func (UnimplementedPasswordsVaultServer) AddPassword(context.Context, *AddPasswordRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPassword not implemented")
}
func (UnimplementedPasswordsVaultServer) GetPassword(context.Context, *GetPasswordRequest) (*Password, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPassword not implemented")
}
func (UnimplementedPasswordsVaultServer) UpdatePassword(context.Context, *UpdatePasswordRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassword not implemented")
}
func (UnimplementedPasswordsVaultServer) IndexPasswords(context.Context, *emptypb.Empty) (*IndexPasswordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndexPasswords not implemented")
}
func (UnimplementedPasswordsVaultServer) DeletePassword(context.Context, *DeletePasswordRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePassword not implemented")
}
func (UnimplementedPasswordsVaultServer) mustEmbedUnimplementedPasswordsVaultServer() {}

// UnsafePasswordsVaultServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PasswordsVaultServer will
// result in compilation errors.
type UnsafePasswordsVaultServer interface {
	mustEmbedUnimplementedPasswordsVaultServer()
}

func RegisterPasswordsVaultServer(s grpc.ServiceRegistrar, srv PasswordsVaultServer) {
	s.RegisterService(&PasswordsVault_ServiceDesc, srv)
}

func _PasswordsVault_AddPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordsVaultServer).AddPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PasswordsVault_AddPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordsVaultServer).AddPassword(ctx, req.(*AddPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PasswordsVault_GetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordsVaultServer).GetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PasswordsVault_GetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordsVaultServer).GetPassword(ctx, req.(*GetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PasswordsVault_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordsVaultServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PasswordsVault_UpdatePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordsVaultServer).UpdatePassword(ctx, req.(*UpdatePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PasswordsVault_IndexPasswords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordsVaultServer).IndexPasswords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PasswordsVault_IndexPasswords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordsVaultServer).IndexPasswords(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PasswordsVault_DeletePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordsVaultServer).DeletePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PasswordsVault_DeletePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordsVaultServer).DeletePassword(ctx, req.(*DeletePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PasswordsVault_ServiceDesc is the grpc.ServiceDesc for PasswordsVault service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PasswordsVault_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "passwords.v1.PasswordsVault",
	HandlerType: (*PasswordsVaultServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPassword",
			Handler:    _PasswordsVault_AddPassword_Handler,
		},
		{
			MethodName: "GetPassword",
			Handler:    _PasswordsVault_GetPassword_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _PasswordsVault_UpdatePassword_Handler,
		},
		{
			MethodName: "IndexPasswords",
			Handler:    _PasswordsVault_IndexPasswords_Handler,
		},
		{
			MethodName: "DeletePassword",
			Handler:    _PasswordsVault_DeletePassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "passwords.proto",
}
