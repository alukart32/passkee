// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: text.proto

package textpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TextVault_CreateObject_FullMethodName = "/text.v1.TextVault/CreateObject"
	TextVault_PutData_FullMethodName      = "/text.v1.TextVault/PutData"
	TextVault_GetObject_FullMethodName    = "/text.v1.TextVault/GetObject"
	TextVault_GetData_FullMethodName      = "/text.v1.TextVault/GetData"
	TextVault_UpdateObject_FullMethodName = "/text.v1.TextVault/UpdateObject"
	TextVault_ListObjects_FullMethodName  = "/text.v1.TextVault/ListObjects"
	TextVault_DeleteObject_FullMethodName = "/text.v1.TextVault/DeleteObject"
)

// TextVaultClient is the client API for TextVault service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TextVaultClient interface {
	// Creates a new text object and returns it's ID.
	CreateObject(ctx context.Context, in *CreateObjectRequest, opts ...grpc.CallOption) (*CreateObjectResponse, error)
	// Accepts a stream of data chunks of a text object.
	//
	// text's ID must be passed by context.
	PutData(ctx context.Context, opts ...grpc.CallOption) (TextVault_PutDataClient, error)
	// Obtains the text object.
	GetObject(ctx context.Context, in *GetObjectRequest, opts ...grpc.CallOption) (*GetObjectResponse, error)
	// Obtains the data chunks available within a given text object.
	GetData(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (TextVault_GetDataClient, error)
	// Updates details about text object, such as the name or notes.
	UpdateObject(ctx context.Context, in *UpdateObjectRequest, opts ...grpc.CallOption) (*UpdateObjectResponse, error)
	// Lists all text objects.
	ListObjects(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListObjectsResponse, error)
	// Deletes a text object.
	DeleteObject(ctx context.Context, in *DeleteDataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type textVaultClient struct {
	cc grpc.ClientConnInterface
}

func NewTextVaultClient(cc grpc.ClientConnInterface) TextVaultClient {
	return &textVaultClient{cc}
}

func (c *textVaultClient) CreateObject(ctx context.Context, in *CreateObjectRequest, opts ...grpc.CallOption) (*CreateObjectResponse, error) {
	out := new(CreateObjectResponse)
	err := c.cc.Invoke(ctx, TextVault_CreateObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textVaultClient) PutData(ctx context.Context, opts ...grpc.CallOption) (TextVault_PutDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &TextVault_ServiceDesc.Streams[0], TextVault_PutData_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &textVaultPutDataClient{stream}
	return x, nil
}

type TextVault_PutDataClient interface {
	Send(*Chunk) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type textVaultPutDataClient struct {
	grpc.ClientStream
}

func (x *textVaultPutDataClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *textVaultPutDataClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *textVaultClient) GetObject(ctx context.Context, in *GetObjectRequest, opts ...grpc.CallOption) (*GetObjectResponse, error) {
	out := new(GetObjectResponse)
	err := c.cc.Invoke(ctx, TextVault_GetObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textVaultClient) GetData(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (TextVault_GetDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &TextVault_ServiceDesc.Streams[1], TextVault_GetData_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &textVaultGetDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TextVault_GetDataClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type textVaultGetDataClient struct {
	grpc.ClientStream
}

func (x *textVaultGetDataClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *textVaultClient) UpdateObject(ctx context.Context, in *UpdateObjectRequest, opts ...grpc.CallOption) (*UpdateObjectResponse, error) {
	out := new(UpdateObjectResponse)
	err := c.cc.Invoke(ctx, TextVault_UpdateObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textVaultClient) ListObjects(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListObjectsResponse, error) {
	out := new(ListObjectsResponse)
	err := c.cc.Invoke(ctx, TextVault_ListObjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textVaultClient) DeleteObject(ctx context.Context, in *DeleteDataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TextVault_DeleteObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TextVaultServer is the server API for TextVault service.
// All implementations must embed UnimplementedTextVaultServer
// for forward compatibility
type TextVaultServer interface {
	// Creates a new text object and returns it's ID.
	CreateObject(context.Context, *CreateObjectRequest) (*CreateObjectResponse, error)
	// Accepts a stream of data chunks of a text object.
	//
	// text's ID must be passed by context.
	PutData(TextVault_PutDataServer) error
	// Obtains the text object.
	GetObject(context.Context, *GetObjectRequest) (*GetObjectResponse, error)
	// Obtains the data chunks available within a given text object.
	GetData(*GetDataRequest, TextVault_GetDataServer) error
	// Updates details about text object, such as the name or notes.
	UpdateObject(context.Context, *UpdateObjectRequest) (*UpdateObjectResponse, error)
	// Lists all text objects.
	ListObjects(context.Context, *emptypb.Empty) (*ListObjectsResponse, error)
	// Deletes a text object.
	DeleteObject(context.Context, *DeleteDataRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedTextVaultServer()
}

// UnimplementedTextVaultServer must be embedded to have forward compatible implementations.
type UnimplementedTextVaultServer struct {
}

func (UnimplementedTextVaultServer) CreateObject(context.Context, *CreateObjectRequest) (*CreateObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObject not implemented")
}
func (UnimplementedTextVaultServer) PutData(TextVault_PutDataServer) error {
	return status.Errorf(codes.Unimplemented, "method PutData not implemented")
}
func (UnimplementedTextVaultServer) GetObject(context.Context, *GetObjectRequest) (*GetObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObject not implemented")
}
func (UnimplementedTextVaultServer) GetData(*GetDataRequest, TextVault_GetDataServer) error {
	return status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedTextVaultServer) UpdateObject(context.Context, *UpdateObjectRequest) (*UpdateObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateObject not implemented")
}
func (UnimplementedTextVaultServer) ListObjects(context.Context, *emptypb.Empty) (*ListObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListObjects not implemented")
}
func (UnimplementedTextVaultServer) DeleteObject(context.Context, *DeleteDataRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObject not implemented")
}
func (UnimplementedTextVaultServer) mustEmbedUnimplementedTextVaultServer() {}

// UnsafeTextVaultServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TextVaultServer will
// result in compilation errors.
type UnsafeTextVaultServer interface {
	mustEmbedUnimplementedTextVaultServer()
}

func RegisterTextVaultServer(s grpc.ServiceRegistrar, srv TextVaultServer) {
	s.RegisterService(&TextVault_ServiceDesc, srv)
}

func _TextVault_CreateObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextVaultServer).CreateObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextVault_CreateObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextVaultServer).CreateObject(ctx, req.(*CreateObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextVault_PutData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TextVaultServer).PutData(&textVaultPutDataServer{stream})
}

type TextVault_PutDataServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type textVaultPutDataServer struct {
	grpc.ServerStream
}

func (x *textVaultPutDataServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *textVaultPutDataServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TextVault_GetObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextVaultServer).GetObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextVault_GetObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextVaultServer).GetObject(ctx, req.(*GetObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextVault_GetData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TextVaultServer).GetData(m, &textVaultGetDataServer{stream})
}

type TextVault_GetDataServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type textVaultGetDataServer struct {
	grpc.ServerStream
}

func (x *textVaultGetDataServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _TextVault_UpdateObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextVaultServer).UpdateObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextVault_UpdateObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextVaultServer).UpdateObject(ctx, req.(*UpdateObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextVault_ListObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextVaultServer).ListObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextVault_ListObjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextVaultServer).ListObjects(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextVault_DeleteObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextVaultServer).DeleteObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextVault_DeleteObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextVaultServer).DeleteObject(ctx, req.(*DeleteDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TextVault_ServiceDesc is the grpc.ServiceDesc for TextVault service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TextVault_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "text.v1.TextVault",
	HandlerType: (*TextVaultServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateObject",
			Handler:    _TextVault_CreateObject_Handler,
		},
		{
			MethodName: "GetObject",
			Handler:    _TextVault_GetObject_Handler,
		},
		{
			MethodName: "UpdateObject",
			Handler:    _TextVault_UpdateObject_Handler,
		},
		{
			MethodName: "ListObjects",
			Handler:    _TextVault_ListObjects_Handler,
		},
		{
			MethodName: "DeleteObject",
			Handler:    _TextVault_DeleteObject_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PutData",
			Handler:       _TextVault_PutData_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetData",
			Handler:       _TextVault_GetData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "text.proto",
}
